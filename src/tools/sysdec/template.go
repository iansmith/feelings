package sysdec

var preambleTemplateText = `
{{if ne .OutTags ""}}
// +build {{.OutTags}}
xxxblankxxx
//
{{end}}
//
// DO NOT EDIT THIS FILE!  YOUR CHANGES WILL BE OVERWRITTEN!
// 
// This file was machine generated from the system description file
// '{{.SourceFilename}}'.  You can obtain the latest version of sysdec
// and the system description files at 
// github.com/iansmith/feelings/src/tools/sysdec
//

package {{.Package}} 
import "{{.Import}}"
import "unsafe"
`

var registerTemplateText = `
{{/* Emit the type of each register */}}
{{range $pname,$pdef := .Peripheral}}
{{range $dontuse,$rdef := $pdef.Register}}
{{/* tricky: can't use $dontuse because of dimensioned registers */}}
type {{printf "%sDef" $rdef.Name}} volatile.Register32
	{{if .Access.CanRead}}
	func (a *{{printf "%sDef" $rdef.Name}}) Get() uint32 {
		return (*volatile.Register32)(a).Get()
	}
	{{end}} {{/*end of can read test*/}}
	{{if .Access.CanWrite}}
	func (a *{{printf "%sDef" $rdef.Name}}) Set(u uint32) {
		(*volatile.Register32)(a).Set(u)
	}
	func (a *{{printf "%sDef" $rdef.Name}}) SetBits(u uint32) {
		(*volatile.Register32)(a).SetBits(u)
	}
	{{end}} {{/*end of can write test*/}}

{{end}} {{/*closes registers*/}}
{{end}} {{/*closes peripherals*/}}
`

var deviceTemplateText = `
///////////////////////////////////////////////////////////////////////
//                             PERIPHERALS
{{/* Emit the struct for each peripheral */}}
{{range $pname,$pdef := .Peripheral}}
///////////////////////////////////////////////////////////////////////
{{$pdef.Description}}

var {{$pname}} *{{printf "%sDef" $pname}} = (*{{printf "%sDef" $pname}})(unsafe.Pointer(uintptr({{printf "0x%x" .MMIOBase}} + {{printf "0x%x" .AddressBlock.BaseAddress}})))

type {{printf "%sDef" $pname}} struct {
	{{- range $rindex, $rdef := $pdef.RegistersWithReserved}}
		{{if $rdef.IsReserved}}
			{{$rdef.Name}} volatile.Register32   // 0x{{printf "%x" .AddressOffset }}		
		{{else}}
			{{if gt .Dim 0}}
				{{$rdef.Name}} [{{.Dim}}] {{printf "%sDef" $rdef.Name}}   // 0x{{printf "%x" .AddressOffset }}
			{{else}}
				{{$rdef.Name}} {{printf "%sDef" $rdef.Name}}   // 0x{{printf "%x" .AddressOffset }}
			{{end}} {{/*closes inner if for dimensioned array */}}
		{{end}} {{/*closes if statement for IsReserved */}}
	{{end}} {{/* closes registers with reserved */}} 
} {{/* closes struct of peripheral */}}
{{end}} {{/* end of peripherals */}}
///////////////////////////////////////////////////////////////////////

`

var bitFieldDeclTemplateText = `
{{if .CanRead}}
{{if eq .BitRange.Width 1}}
func (a *{{printf "%sDef" .RegName}}) {{printf "%sIsSet" .Name}}() bool {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}}, Ptr:(*volatile.Register32)(a)}
	return b.HasBits()
}
{{else}}
func (a *{{printf "%sDef" .RegName}}) {{.Name}} () uint32 {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb }} ,Ptr:(*volatile.Register32)(a)}
	return b.Get()
}
{{end}} {{/*end of the bit width is 1*/}}
{{end}} {{/*end of can read */}}

{{if .CanWrite}}
{{if eq .BitRange.Width 1}} 
func (a *{{printf "%sDef" .RegName}}) {{printf "Set%s" .Name}}() {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}},Ptr:(*volatile.Register32)(a)}
	b.Set()
}
func (a *{{printf "%sDef" .RegName}}) {{printf "Clear%s" .Name}}() {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}},Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
{{else}}
func (a *{{printf "%sDef" .RegName}}) {{printf "Set%s" .Name}}(v uint32) {
	b:=volatile.BitField{ Msb:{{ .BitRange.Msb}}, Lsb:{{ .BitRange.Lsb}}, Ptr:(*volatile.Register32)(a)}
	b.SetBits(v)
}
{{end}} {{/*closes if */}}

{{range .EnumeratedValue}}
{{if .Field.CanRead}}
func (a *{{printf "%sDef" .Field.RegName}}) {{.Name}}() bool {
	return (*volatile.Register32)(a).Get()=={{ .Value }}
}
{{end}} {{/* closes if */}}
{{if .Field.CanWrite}}
func (a *{{printf "%sDef" .Field.RegName }}) {{ printf "Set%s" .Name }}()  {
	(*volatile.Register32)(a).SetBits({{ .Value }} << {{.Field.BitRange.Lsb}})
}
{{end}} {{/* closes if */}}
{{end}} {{/*closes enumerated values*/}}
{{end}} {{/*closes Can write */}}
`

var constantTemplateText = `
{{range $name,$val :=  .}}
const {{$name}} = {{$val}}
{{end}} {{/*end of constants */}}
`

var intermediatTemplateText = `// +build {{.InTags}}
package {{.Pkg}}

import (
	"flag"
	"tools/sysdec"
	"tools/sysdec/sys"
	{{if .Dump}}
	"os"
 	"github.com/davecgh/go-spew/spew"
	{{end}}
)
func main() {
	flag.Parse()

	//generate these based on the input
	root:=sys.{{.Root}}
	{{if .Dump}}
	spew.Fdump(os.Stdout,root)
	{{end}}
	sysdec.OutputPeripherals(root,"{{.OutTags}}","{{.Package}}","{{.Import}}","{{.SourceFile}}")
}
`
